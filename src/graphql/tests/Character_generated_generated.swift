// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum zzz_DflatGen_Character_Episode: Int32, Enum {
  public typealias T = Int32
  public static var byteSize: Int { return MemoryLayout<Int32>.size }
  public var value: Int32 { return self.rawValue }
  case newhope = 0
  case empire = 1
  case jedi = 2

  public static var max: zzz_DflatGen_Character_Episode { return .jedi }
  public static var min: zzz_DflatGen_Character_Episode { return .newhope }
}

public enum zzz_DflatGen_Character_Subtype: UInt8, Enum {
  public typealias T = UInt8
  public static var byteSize: Int { return MemoryLayout<UInt8>.size }
  public var value: UInt8 { return self.rawValue }
  case none_ = 0
  case human = 1
  case droid = 2

  public static var max: zzz_DflatGen_Character_Subtype { return .droid }
  public static var min: zzz_DflatGen_Character_Subtype { return .none_ }
}

public struct zzz_DflatGen_Character_Droid: FlatBufferObject {

  static func validateVersion() { FlatBuffersVersion_1_12_0() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static func getRootAsDroid(bb: ByteBuffer) -> zzz_DflatGen_Character_Droid {
    return zzz_DflatGen_Character_Droid(
      Table(
        bb: bb, position: Int32(bb.read(def: UOffset.self, position: bb.reader)) + Int32(bb.reader))
    )
  }

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case appearsIn = 4
    case friends = 6
    case name = 8
    case primaryFunction = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var appearsInCount: Int32 {
    let o = _accessor.offset(VTOFFSET.appearsIn.v)
    return o == 0 ? 0 : _accessor.vector(count: o)
  }
  public func appearsIn(at index: Int32) -> zzz_DflatGen_Character_Episode? {
    let o = _accessor.offset(VTOFFSET.appearsIn.v)
    return o == 0
      ? zzz_DflatGen_Character_Episode.newhope
      : zzz_DflatGen_Character_Episode(
        rawValue: _accessor.directRead(of: Int32.self, offset: _accessor.vector(at: o) + index * 4))
  }
  public var friendsCount: Int32 {
    let o = _accessor.offset(VTOFFSET.friends.v)
    return o == 0 ? 0 : _accessor.vector(count: o)
  }
  public func friends(at index: Int32) -> String? {
    let o = _accessor.offset(VTOFFSET.friends.v)
    return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4)
  }
  public var name: String? {
    let o = _accessor.offset(VTOFFSET.name.v)
    return o == 0 ? nil : _accessor.string(at: o)
  }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  public var primaryFunction: String? {
    let o = _accessor.offset(VTOFFSET.primaryFunction.v)
    return o == 0 ? nil : _accessor.string(at: o)
  }
  public var primaryFunctionSegmentArray: [UInt8]? {
    return _accessor.getVector(at: VTOFFSET.primaryFunction.v)
  }
  public static func startDroid(_ fbb: inout FlatBufferBuilder) -> UOffset {
    fbb.startTable(with: 4)
  }
  public static func addVectorOf(appearsIn: Offset<UOffset>, _ fbb: inout FlatBufferBuilder) {
    fbb.add(offset: appearsIn, at: VTOFFSET.appearsIn.p)
  }
  public static func addVectorOf(friends: Offset<UOffset>, _ fbb: inout FlatBufferBuilder) {
    fbb.add(offset: friends, at: VTOFFSET.friends.p)
  }
  public static func add(name: Offset<String>, _ fbb: inout FlatBufferBuilder) {
    fbb.add(offset: name, at: VTOFFSET.name.p)
  }
  public static func add(primaryFunction: Offset<String>, _ fbb: inout FlatBufferBuilder) {
    fbb.add(offset: primaryFunction, at: VTOFFSET.primaryFunction.p)
  }
  public static func endDroid(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset<UOffset> {
    let end = Offset<UOffset>(offset: fbb.endTable(at: start))
    return end
  }
  public static func createDroid(
    _ fbb: inout FlatBufferBuilder,
    appearsInVectorOffset appearsIn: Offset<UOffset> = Offset(),
    friendsVectorOffset friends: Offset<UOffset> = Offset(),
    nameOffset name: Offset<String> = Offset(),
    primaryFunctionOffset primaryFunction: Offset<String> = Offset()
  ) -> Offset<UOffset> {
    let __start = zzz_DflatGen_Character_Droid.startDroid(&fbb)
    zzz_DflatGen_Character_Droid.addVectorOf(appearsIn: appearsIn, &fbb)
    zzz_DflatGen_Character_Droid.addVectorOf(friends: friends, &fbb)
    zzz_DflatGen_Character_Droid.add(name: name, &fbb)
    zzz_DflatGen_Character_Droid.add(primaryFunction: primaryFunction, &fbb)
    return zzz_DflatGen_Character_Droid.endDroid(&fbb, start: __start)
  }
}

public struct zzz_DflatGen_Character_Human: FlatBufferObject {

  static func validateVersion() { FlatBuffersVersion_1_12_0() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static func getRootAsHuman(bb: ByteBuffer) -> zzz_DflatGen_Character_Human {
    return zzz_DflatGen_Character_Human(
      Table(
        bb: bb, position: Int32(bb.read(def: UOffset.self, position: bb.reader)) + Int32(bb.reader))
    )
  }

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case appearsIn = 4
    case friends = 6
    case height = 8
    case homePlanet = 10
    case name = 12
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var appearsInCount: Int32 {
    let o = _accessor.offset(VTOFFSET.appearsIn.v)
    return o == 0 ? 0 : _accessor.vector(count: o)
  }
  public func appearsIn(at index: Int32) -> zzz_DflatGen_Character_Episode? {
    let o = _accessor.offset(VTOFFSET.appearsIn.v)
    return o == 0
      ? zzz_DflatGen_Character_Episode.newhope
      : zzz_DflatGen_Character_Episode(
        rawValue: _accessor.directRead(of: Int32.self, offset: _accessor.vector(at: o) + index * 4))
  }
  public var friendsCount: Int32 {
    let o = _accessor.offset(VTOFFSET.friends.v)
    return o == 0 ? 0 : _accessor.vector(count: o)
  }
  public func friends(at index: Int32) -> String? {
    let o = _accessor.offset(VTOFFSET.friends.v)
    return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4)
  }
  public var height: Double {
    let o = _accessor.offset(VTOFFSET.height.v)
    return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o)
  }
  public var homePlanet: String? {
    let o = _accessor.offset(VTOFFSET.homePlanet.v)
    return o == 0 ? nil : _accessor.string(at: o)
  }
  public var homePlanetSegmentArray: [UInt8]? {
    return _accessor.getVector(at: VTOFFSET.homePlanet.v)
  }
  public var name: String? {
    let o = _accessor.offset(VTOFFSET.name.v)
    return o == 0 ? nil : _accessor.string(at: o)
  }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  public static func startHuman(_ fbb: inout FlatBufferBuilder) -> UOffset {
    fbb.startTable(with: 5)
  }
  public static func addVectorOf(appearsIn: Offset<UOffset>, _ fbb: inout FlatBufferBuilder) {
    fbb.add(offset: appearsIn, at: VTOFFSET.appearsIn.p)
  }
  public static func addVectorOf(friends: Offset<UOffset>, _ fbb: inout FlatBufferBuilder) {
    fbb.add(offset: friends, at: VTOFFSET.friends.p)
  }
  public static func add(height: Double, _ fbb: inout FlatBufferBuilder) {
    fbb.add(element: height, def: 0.0, at: VTOFFSET.height.p)
  }
  public static func add(homePlanet: Offset<String>, _ fbb: inout FlatBufferBuilder) {
    fbb.add(offset: homePlanet, at: VTOFFSET.homePlanet.p)
  }
  public static func add(name: Offset<String>, _ fbb: inout FlatBufferBuilder) {
    fbb.add(offset: name, at: VTOFFSET.name.p)
  }
  public static func endHuman(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset<UOffset> {
    let end = Offset<UOffset>(offset: fbb.endTable(at: start))
    return end
  }
  public static func createHuman(
    _ fbb: inout FlatBufferBuilder,
    appearsInVectorOffset appearsIn: Offset<UOffset> = Offset(),
    friendsVectorOffset friends: Offset<UOffset> = Offset(),
    height: Double = 0.0,
    homePlanetOffset homePlanet: Offset<String> = Offset(),
    nameOffset name: Offset<String> = Offset()
  ) -> Offset<UOffset> {
    let __start = zzz_DflatGen_Character_Human.startHuman(&fbb)
    zzz_DflatGen_Character_Human.addVectorOf(appearsIn: appearsIn, &fbb)
    zzz_DflatGen_Character_Human.addVectorOf(friends: friends, &fbb)
    zzz_DflatGen_Character_Human.add(height: height, &fbb)
    zzz_DflatGen_Character_Human.add(homePlanet: homePlanet, &fbb)
    zzz_DflatGen_Character_Human.add(name: name, &fbb)
    return zzz_DflatGen_Character_Human.endHuman(&fbb, start: __start)
  }
}

public struct zzz_DflatGen_Character: FlatBufferObject {

  static func validateVersion() { FlatBuffersVersion_1_12_0() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static func getRootAsCharacter(bb: ByteBuffer) -> zzz_DflatGen_Character {
    return zzz_DflatGen_Character(
      Table(
        bb: bb, position: Int32(bb.read(def: UOffset.self, position: bb.reader)) + Int32(bb.reader))
    )
  }

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case subtypeType = 4
    case subtype = 6
    case id = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var subtypeType: zzz_DflatGen_Character_Subtype {
    let o = _accessor.offset(VTOFFSET.subtypeType.v)
    return o == 0
      ? .none_
      : zzz_DflatGen_Character_Subtype(rawValue: _accessor.readBuffer(of: UInt8.self, at: o))
        ?? .none_
  }
  public func subtype<T: FlatBufferObject>(type: T.Type) -> T? {
    let o = _accessor.offset(VTOFFSET.subtype.v)
    return o == 0 ? nil : _accessor.union(o)
  }
  public var id: String? {
    let o = _accessor.offset(VTOFFSET.id.v)
    return o == 0 ? nil : _accessor.string(at: o)
  }
  public var idSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.id.v) }
  public static func startCharacter(_ fbb: inout FlatBufferBuilder) -> UOffset {
    fbb.startTable(with: 3)
  }
  public static func add(
    subtypeType: zzz_DflatGen_Character_Subtype, _ fbb: inout FlatBufferBuilder
  ) { fbb.add(element: subtypeType.rawValue, def: 0, at: VTOFFSET.subtypeType.p) }
  public static func add(subtype: Offset<UOffset>, _ fbb: inout FlatBufferBuilder) {
    fbb.add(offset: subtype, at: VTOFFSET.subtype.p)
  }
  public static func add(id: Offset<String>, _ fbb: inout FlatBufferBuilder) {
    fbb.add(offset: id, at: VTOFFSET.id.p)
  }
  public static func endCharacter(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset<UOffset>
  {
    let end = Offset<UOffset>(offset: fbb.endTable(at: start))
    return end
  }
  public static func createCharacter(
    _ fbb: inout FlatBufferBuilder,
    subtypeType: zzz_DflatGen_Character_Subtype = .none_,
    subtypeOffset subtype: Offset<UOffset> = Offset(),
    idOffset id: Offset<String> = Offset()
  ) -> Offset<UOffset> {
    let __start = zzz_DflatGen_Character.startCharacter(&fbb)
    zzz_DflatGen_Character.add(subtypeType: subtypeType, &fbb)
    zzz_DflatGen_Character.add(subtype: subtype, &fbb)
    zzz_DflatGen_Character.add(id: id, &fbb)
    return zzz_DflatGen_Character.endCharacter(&fbb, start: __start)
  }
}
